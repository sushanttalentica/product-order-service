spring:
  profiles:
    active: prod
  
  datasource:
    url: jdbc:mysql://${DB_HOST:prod-mysql-cluster}:${DB_PORT:3306}/${DB_NAME:ecommerce_prod}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
  
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour
      cache-null-values: false
      enable-statistics: true
  
  data:
    redis:
      host: ${REDIS_HOST:prod-redis-cluster}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 50
          max-idle: 20
          min-idle: 10
          max-wait: 2000ms
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: product-order-service-prod
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        max.poll.records: 500
        fetch.min.bytes: 1
        fetch.max.wait.ms: 500
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 10
      batch-size: 32768
      linger-ms: 10
      buffer-memory: 67108864
      properties:
        max.in.flight.requests.per.connection: 1
        enable.idempotence: true
        compression.type: snappy
        delivery.timeout.ms: 120000

server:
  port: 8080
  servlet:
    context-path: /api/v1
  tomcat:
    max-threads: 200
    min-spare-threads: 20
    max-connections: 8192
    accept-count: 100
    connection-timeout: 20000

security:
  jwt:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION:3600000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: never
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

logging:
  level:
    com.ecommerce.productorder: INFO
    org.springframework.kafka: ERROR
    org.springframework.security: ERROR
    org.hibernate.SQL: ERROR
    org.hibernate.type.descriptor.sql.BasicBinder: ERROR
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/product-order-service-prod.log
    max-size: 500MB
    max-history: 60
  logback:
    rollingpolicy:
      clean-history-on-start: true

# Production specific configurations
app:
  environment: prod
  debug: false
  mock-services: false
  
# External service configurations for Production
external:
  payment:
    service-url: ${PAYMENT_SERVICE_URL}
    timeout: 30000
    retry-attempts: 5
    circuit-breaker:
      enabled: true
      failure-threshold: 5
      timeout: 10000
  
  notification:
    service-url: ${NOTIFICATION_SERVICE_URL}
    timeout: 10000
    retry-attempts: 3
    circuit-breaker:
      enabled: true
      failure-threshold: 3
      timeout: 5000
  
  inventory:
    service-url: ${INVENTORY_SERVICE_URL}
    timeout: 15000
    retry-attempts: 5
    circuit-breaker:
      enabled: true
      failure-threshold: 5
      timeout: 10000
  
  s3:
    bucket-name: ${S3_BUCKET_NAME}
    region: ${AWS_REGION}
    access-key: ${AWS_ACCESS_KEY}
    secret-key: ${AWS_SECRET_KEY}
    endpoint: ${S3_ENDPOINT:}

# Performance configurations for Production
performance:
  cache:
    product-cache-ttl: 3600
    category-cache-ttl: 7200
  database:
    connection-pool-size: 50
    query-timeout: 60
  kafka:
    batch-size: 32768
    compression-type: snappy
  thread-pool:
    core-size: 20
    max-size: 100
    queue-capacity: 200

# Monitoring and observability
monitoring:
  metrics:
    enabled: true
    export-interval: 30s
  tracing:
    enabled: true
    sampling-rate: 0.1
  alerts:
    enabled: true
    health-check-interval: 30s
    error-threshold: 10
    response-time-threshold: 2000ms

# Security configurations
security-config:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  rate-limiting:
    enabled: true
    requests-per-minute: 1000
    burst-capacity: 2000
