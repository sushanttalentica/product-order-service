spring:
  profiles:
    active: uat
  
  datasource:
    url: jdbc:mysql://uat-mysql-server:3306/ecommerce_uat
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME:uat_user}
    password: ${DB_PASSWORD:uat_password}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  cache:
    type: redis
    redis:
      time-to-live: 1800000 # 30 minutes
      cache-null-values: false
      enable-statistics: true
  
  data:
    redis:
      host: ${REDIS_HOST:uat-redis-server}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:uat-kafka-cluster:9092}
    consumer:
      group-id: product-order-service-uat
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 5
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        max.in.flight.requests.per.connection: 1
        enable.idempotence: true

server:
  port: 8080
  servlet:
    context-path: /api/v1

security:
  jwt:
    secret: ${JWT_SECRET:uatSecretKey123456789012345678901234567890}
    expiration: ${JWT_EXPIRATION:86400000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.ecommerce.productorder: INFO
    org.springframework.kafka: WARN
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/product-order-service-uat.log
    max-size: 100MB
    max-history: 30

# UAT specific configurations
app:
  environment: uat
  debug: false
  mock-services: false
  
# External service configurations for UAT
external:
  payment:
    service-url: ${PAYMENT_SERVICE_URL:http://uat-payment-service:8080}
    timeout: 30000
    retry-attempts: 3
  
  notification:
    service-url: ${NOTIFICATION_SERVICE_URL:http://uat-notification-service:8080}
    timeout: 10000
    retry-attempts: 2
  
  inventory:
    service-url: ${INVENTORY_SERVICE_URL:http://uat-inventory-service:8080}
    timeout: 15000
    retry-attempts: 3
  
  s3:
    bucket-name: ${S3_BUCKET_NAME:product-order-service-uat}
    region: ${AWS_REGION:us-east-1}
    access-key: ${AWS_ACCESS_KEY}
    secret-key: ${AWS_SECRET_KEY}

# Performance configurations for UAT
performance:
  cache:
    product-cache-ttl: 1800
    category-cache-ttl: 3600
  database:
    connection-pool-size: 20
    query-timeout: 30
  kafka:
    batch-size: 16384
    compression-type: snappy
