# UAT Environment Configuration
# Product Order Service - UAT Settings

spring:
  profiles:
    active: uat
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:productorder_uat}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:admin}
    password: ${DB_PASSWORD:password}
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: 0
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 15
        max-idle: 8
        min-idle: 2
        max-wait: -1ms

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: product-order-service-uat
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  # Security Configuration
  security:
    jwt:
      secret: ${JWT_SECRET:uat-secret-key-very-long-and-secure}
      expiration: 7200000 # 2 hours

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /product-order-service
  tomcat:
    max-threads: 150
    min-spare-threads: 10

# Logging Configuration
logging:
  level:
    com.ecommerce.productorder: INFO
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/product-order-service-uat.log
    max-size: 50MB
    max-history: 30

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# AWS S3 Configuration (UAT)
aws:
  s3:
    bucket-name: ${S3_BUCKET:my-pos-bucket-125-uat}
    region: ${S3_REGION:ap-south-1}
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}

# Application Configuration
app:
  name: Product Order Service
  version: 1.0.0
  environment: uat
  
  # Feature Flags
  features:
    invoice-generation: true
    payment-processing: true
    notification-service: true
    inventory-service: true

# Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
