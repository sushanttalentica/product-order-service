# Prometheus Configuration for Product Order Service
# Monitoring and metrics collection configuration

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'product-order-service'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "rules/*.yml"

# Scrape configuration
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Product Order Service
  - job_name: 'product-order-service'
    metrics_path: '/product-order-service/actuator/prometheus'
    static_configs:
      - targets: ['product-order-service:8080']
    scrape_interval: 30s
    scrape_timeout: 10s
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: product-order-service:8080

  # Node Exporter
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  # cAdvisor
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

  # Redis Exporter
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Kafka Exporter
  - job_name: 'kafka-exporter'
    static_configs:
      - targets: ['kafka-exporter:9308']

  # PostgreSQL Exporter
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Nginx Exporter
  - job_name: 'nginx-exporter'
    static_configs:
      - targets: ['nginx-exporter:9113']

# Recording rules for common queries
recording_rules:
  - name: product_order_service_rules
    rules:
      # Application metrics
      - record: product_order_service:http_requests_total
        expr: sum(rate(http_server_requests_seconds_count[5m])) by (instance, method, status)
        labels:
          service: product-order-service
      
      - record: product_order_service:http_request_duration_seconds
        expr: histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket[5m])) by (le))
        labels:
          service: product-order-service
      
      # JVM metrics
      - record: product_order_service:jvm_memory_used_bytes
        expr: jvm_memory_used_bytes{application="product-order-service"}
        labels:
          service: product-order-service
      
      - record: product_order_service:jvm_gc_duration_seconds
        expr: sum(rate(jvm_gc_pause_seconds_sum[5m])) by (instance)
        labels:
          service: product-order-service
      
      # Database metrics
      - record: product_order_service:database_connections_active
        expr: hikaricp_connections_active{application="product-order-service"}
        labels:
          service: product-order-service
      
      - record: product_order_service:database_connections_idle
        expr: hikaricp_connections_idle{application="product-order-service"}
        labels:
          service: product-order-service
      
      # Cache metrics
      - record: product_order_service:cache_hits_total
        expr: sum(rate(cache_gets_total{result="hit"}[5m])) by (cache_name)
        labels:
          service: product-order-service
      
      - record: product_order_service:cache_misses_total
        expr: sum(rate(cache_gets_total{result="miss"}[5m])) by (cache_name)
        labels:
          service: product-order-service
      
      # Business metrics
      - record: product_order_service:orders_created_total
        expr: sum(rate(orders_created_total[5m])) by (instance)
        labels:
          service: product-order-service
      
      - record: product_order_service:payments_processed_total
        expr: sum(rate(payments_processed_total[5m])) by (instance, status)
        labels:
          service: product-order-service
      
      - record: product_order_service:invoices_generated_total
        expr: sum(rate(invoices_generated_total[5m])) by (instance)
        labels:
          service: product-order-service

# Alert rules
alert_rules:
  - name: product_order_service_alerts
    rules:
      # High error rate
      - alert: HighErrorRate
        expr: sum(rate(http_server_requests_seconds_count{status=~"5.."}[5m])) / sum(rate(http_server_requests_seconds_count[5m])) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
      
      # High response time
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket[5m])) by (le)) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }}s for {{ $labels.instance }}"
      
      # High memory usage
      - alert: HighMemoryUsage
        expr: (jvm_memory_used_bytes / jvm_memory_max_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
      
      # Database connection pool exhausted
      - alert: DatabaseConnectionPoolExhausted
        expr: hikaricp_connections_active / hikaricp_connections_max > 0.9
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Database connection pool nearly exhausted"
          description: "Connection pool usage is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
      
      # Service down
      - alert: ServiceDown
        expr: up{job="product-order-service"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Product Order Service is down"
          description: "Service {{ $labels.instance }} is down"
      
      # High CPU usage
      - alert: HighCPUUsage
        expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is {{ $value }}% for {{ $labels.instance }}"
      
      # Disk space low
      - alert: DiskSpaceLow
        expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes) < 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Disk space is low"
          description: "Disk space is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
