version: '3.8'

# Simplified Docker Compose for LOCAL DEVELOPMENT
# Works on any machine - no Java/Maven installation needed!
# Just run: docker-compose -f docker-compose.local.yml up --build

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-order-service
    ports:
      - "8080:8080"      # Main application
      - "5005:5005"      # Debug port (for IntelliJ remote debugging)
    environment:
      # Database (H2 in-memory - no external DB needed)
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      
      # Redis (optional - connects to redis service if needed)
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      
      # Kafka (optional - connects to kafka service)
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      
      # AWS S3 (use your credentials)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-my-pos-bucket-125}
      
      # JWT Secret
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-min-256-bits
      
      # Debug mode (for remote debugging from IntelliJ)
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      
    volumes:
      # Mount logs directory
      - ./logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/product-order-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_started

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6380:6379"  # Use 6380 externally to avoid conflicts
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (for event streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9094:9092"  # Use 9094 externally to avoid conflicts
      - "9095:9093"  # Use 9095 externally
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI (Visual interface to see topics and messages)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

